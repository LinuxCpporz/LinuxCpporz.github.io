<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linuxcpporz.github.io</id>
    <title>云渺阿姨的学习笔记</title>
    <updated>2021-10-18T17:24:07.723Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://linuxcpporz.github.io"/>
    <link rel="self" href="https://linuxcpporz.github.io/atom.xml"/>
    <subtitle>记一些乱七八糟的前端和算法知识</subtitle>
    <logo>https://linuxcpporz.github.io/images/avatar.png</logo>
    <icon>https://linuxcpporz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 云渺阿姨的学习笔记</rights>
    <entry>
        <title type="html"><![CDATA[C++实现十大排序算法]]></title>
        <id>https://linuxcpporz.github.io/post/cshi-xian-shi-da-pai-xu-suan-fa/</id>
        <link href="https://linuxcpporz.github.io/post/cshi-xian-shi-da-pai-xu-suan-fa/">
        </link>
        <updated>2021-10-18T16:30:42.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://linuxcpporz.github.io/post-images/1634574732046.png" alt="" loading="lazy"></figure>
<h1 id="1-冒泡排序">1 冒泡排序</h1>
<p>冒泡排序无疑是最为出名的排序算法之一，从序列的一端开始往另一端冒泡（你可以从左往右冒泡，也可以从右往左冒泡，看心情），依次比较相邻的两个数的大小（到底是比大还是比小也看你心情）。</p>
<figure data-type="image" tabindex="2"><img src="https://linuxcpporz.github.io/post-images/1634574775232.gif" alt="" loading="lazy"></figure>
<p>（无序区，有序区）。从无序区通过交换找出最小元素放到有序区前端。</p>
<p>冒泡排序思路：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<h2 id="c实现冒泡排序">C++实现冒泡排序</h2>
<pre><code>void BubbleSort(vector&lt;int&gt;&amp; v) {
    int len = v.size();
    for (int i = 0; i &lt; len - 1; ++i)
        for (int j = 0; j &lt; len - 1 - i; ++j)
            if (v[j] &gt; v[j + 1]) 
                swap(v[j], v[j + 1]);
}
</code></pre>
<h1 id="2-选择排序">2 选择排序</h1>
<p>选择排序的思路是这样的：首先，找到数组中最小的元素，拎出来，将它和数组的第一个元素交换位置，第二步，在剩下的元素中继续寻找最小的元素，拎出来，和数组的第二个元素交换位置，如此循环，直到整个数组排序完成。<br>
至于选大还是选小，这个都无所谓，你也可以每次选择最大的拎出来排，也可以每次选择最小的拎出来的排，只要你的排序的手段是这种方式，都叫选择排序。</p>
<figure data-type="image" tabindex="3"><img src="https://linuxcpporz.github.io/post-images/1634574940781.gif" alt="" loading="lazy"></figure>
<p>（有序区，无序区）。在无序区里找一个最小的元素跟在有序区的后面。对数组：比较得多，换得少。</p>
<p>选择排序思路：</p>
<ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li>
<li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾</li>
<li>以此类推，直到所有元素均排序完毕</li>
</ol>
<h2 id="c实现选择排序">C++实现选择排序</h2>
<pre><code>void SelectionSort(vector&lt;int&gt;&amp; v) {
    int min, len = v.size();
    for (int i = 0; i &lt; len - 1; ++i) {
        min = i;
        for (int j = i + 1; j &lt; len; ++j) {
            if (v[j] &lt; v[min]) {    // 标记最小的
                min = j;
            }
        }
        if (i != min)  // 交换到前面
            swap(v[i], v[min]);
    }
}
</code></pre>
<h1 id="插入排序">插入排序</h1>
<p>插入排序的思想和我们打扑克摸牌的时候一样，从牌堆里一张一张摸起来的牌都是乱序的，我们会把摸起来的牌插入到左手中合适的位置，让左手中的牌时刻保持一个有序的状态。那如果我们不是从牌堆里摸牌，而是左手里面初始化就是一堆乱牌呢？ 一样的道理，我们把牌往手的右边挪一挪，把手的左边空出一点位置来，然后在乱牌中抽一张出来，插入到左边，再抽一张出来，插入到左边，再抽一张，插入到左边，每次插入都插入到左边合适的位置，时刻保持左边的牌是有序的，直到右边的牌抽完，则排序完毕。</p>
<figure data-type="image" tabindex="4"><img src="https://linuxcpporz.github.io/post-images/1634575211446.gif" alt="" loading="lazy"></figure>
<p>（有序区，无序区）。把无序区的第一个元素插入到有序区的合适的位置。对数组：比较得少，换得多。</p>
<p>插入排序思路：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h2 id="c实现插入排序">C++实现插入排序</h2>
<pre><code>void InsertSort(vector&lt;int&gt;&amp; v)
{
    int len = v.size();
    for (int i = 1; i &lt; len; ++i) {
        int temp = v[i];
        for(int j = i - 1; j &gt;= 0; --j)
        {
            if(v[j] &gt; temp)
            {
                v[j + 1] = v[j];
                v[j] = temp;
            }
            else
                break;
        }
    }
}
</code></pre>
<h1 id="4-希尔排序">4 希尔排序</h1>
<p>希尔排序这个名字，来源于它的发明者希尔，也称作“缩小增量排序”，是插入排序的一种更高效的改进版本。我们知道，插入排序对于大规模的乱序数组的时候效率是比较慢的，因为它每次只能将数据移动一位，希尔排序为了加快插入的速度，让数据移动的时候可以实现跳跃移动，节省了一部分的时间开支。</p>
<figure data-type="image" tabindex="5"><img src="https://linuxcpporz.github.io/post-images/1634575417121.gif" alt="" loading="lazy"></figure>
<p>希尔排序：每一轮按照事先决定的间隔进行插入排序，间隔会依次缩小，最后一次一定要是1。</p>
<h2 id="c实现希尔排序">C++实现希尔排序</h2>
<pre><code>template&lt;typename T&gt;
void shell_sort(T array[], int length) {
    int h = 1;
    while (h &lt; length / 3) {
        h = 3 * h + 1;
    }
    while (h &gt;= 1) {
        for (int i = h; i &lt; length; i++) {
            for (int j = i; j &gt;= h &amp;&amp; array[j] &lt; array[j - h]; j -= h) {
                std::swap(array[j], array[j - h]);
            }
        }
        h = h / 3;
    }
}
</code></pre>
<p>可能你会问为什么区间要以 gap = gap*3 + 1 去计算，其实最优的区间计算方法是没有答案的，这是一个长期未解决的问题，不过差不多都会取在二分之一到三分之一附近。</p>
<h1 id="5-归并排序">5 归并排序</h1>
<p>归并字面上的意思是合并，归并算法的核心思想是分治法，就是将一个数组一刀切两半，递归切，直到切成单个元素，然后重新组装合并，单个元素合并成小数组，两个小数组合并成大数组，直到最终合并完成，排序完毕。</p>
<figure data-type="image" tabindex="6"><img src="https://linuxcpporz.github.io/post-images/1634575552749.gif" alt="" loading="lazy"></figure>
<p>归并排序：把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。可从上到下或从下到上进行。</p>
<h2 id="c实现归并排序迭代版">C++实现归并排序（迭代版）</h2>
<pre><code>template&lt;typename T&gt;
void merge_sort(T arr[], int len) {
    T* a = arr;
    T* b = new T[len];
    for (int seg = 1; seg &lt; len; seg += seg) {
        for (int start = 0; start &lt; len; start += seg + seg) {
            int low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);
            int k = low;
            int start1 = low, end1 = mid;
            int start2 = mid, end2 = high;
            while (start1 &lt; end1 &amp;&amp; start2 &lt; end2)
                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];
            while (start1 &lt; end1)
                b[k++] = a[start1++];
            while (start2 &lt; end2)
                b[k++] = a[start2++];
        }
        T* temp = a;
        a = b;
        b = temp;
    }
    if (a != arr) {
        for (int i = 0; i &lt; len; i++)
            b[i] = a[i];
        b = a;
    }
    delete[] b;
}
</code></pre>
<p>归并排序的核心思想是分治，分而治之，将一个大问题分解成无数的小问题进行处理，处理之后再合并，这里我们采用递归来实现：</p>
<h2 id="c实现归并排序递归版">C++实现归并排序（递归版）</h2>
<pre><code>template&lt;typename T&gt;
void merge_sort_recursive(T arr[], T reg[], int start, int end) {
    if (start &gt;= end)
        return;
    int len = end - start, mid = (len &gt;&gt; 1) + start;
    int start1 = start, end1 = mid;
    int start2 = mid + 1, end2 = end;
    merge_sort_recursive(arr, reg, start1, end1);
    merge_sort_recursive(arr, reg, start2, end2);
    int k = start;
    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)
        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];
    while (start1 &lt;= end1)
        reg[k++] = arr[start1++];
    while (start2 &lt;= end2)
        reg[k++] = arr[start2++];
    for (k = start; k &lt;= end; k++)
        arr[k] = reg[k];
}
</code></pre>
<h1 id="6-快速排序">6 快速排序</h1>
<p>快速排序的核心思想也是分治法，分而治之。它的实现方式是每次从序列中选出一个基准值，其他数依次和基准值做比较，比基准值大的放右边，比基准值小的放左边，然后再对左边和右边的两组数分别选出一个基准值，进行同样的比较移动，重复步骤，直到最后都变成单个元素，整个数组就成了有序的序列。</p>
<figure data-type="image" tabindex="7"><img src="https://linuxcpporz.github.io/post-images/1634575646139.gif" alt="" loading="lazy"></figure>
<p>（小数，基准元素，大数）。在区间中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。</p>
<p>快速排序思路：</p>
<ol>
<li>选取第一个数为基准</li>
<li>将比基准小的数交换到前面，比基准大的数交换到后面</li>
<li>对左右区间重复第二步，直到各区间只有一个数</li>
</ol>
<h2 id="c实现快速排序">C++实现快速排序</h2>
<pre><code>void QuickSort(vector&lt;int&gt;&amp; v, int low, int high) {
    if (low &gt;= high)		// 结束标志
        return;
    int first = low;		// 低位下标
    int last = high;		// 高位下标
    int key = v[first];		// 设第一个为基准

    while (first &lt; last)
    {
        // 将比第一个小的移到前面
        while (first &lt; last &amp;&amp; v[last] &gt;= key)
            last--;
        if (first &lt; last)
            v[first++] = v[last];

        // 将比第一个大的移到后面
        while (first &lt; last &amp;&amp; v[first] &lt;= key)
            first++;
        if (first &lt; last)
            v[last--] = v[first];
    }
    // 基准置位
    v[first] = key;
    // 前半递归
    QuickSort(v, low, first - 1);
    // 后半递归
    QuickSort(v, first + 1, high);
}
</code></pre>
<p>快速排序的时间复杂度和归并排序一样，O(n log n)，但这是建立在每次切分都能把数组一刀切两半差不多大的前提下，如果出现极端情况，比如排一个有序的序列，如[ 9，8，7，6，5，4，3，2，1 ]，选取基准值 9 ，那么需要切分 n – 1 次才能完成整个快速排序的过程，这种情况下，时间复杂度就退化成了 O(n^2)，当然极端情况出现的概率也是比较低的。</p>
<p>所以说，快速排序的时间复杂度是 O(nlogn)，极端情况下会退化成 O(n^2)，为了避免极端情况的发生，选取基准值应该做到随机选取，或者是打乱一下数组再选取。</p>
<p>另外，快速排序的空间复杂度为 O(1)。</p>
<h1 id="7-堆排序">7 堆排序</h1>
<p>堆排序顾名思义，是利用堆这种数据结构来进行排序的算法。堆是一种优先队列，两种实现，最大堆和最小堆，由于我们这里排序按升序排，所以就直接以最大堆来说吧。<br>
我们完全可以把堆（以下全都默认为最大堆）看成一棵完全二叉树，但是位于堆顶的元素总是整棵树的最大值，每个子节点的值都比父节点小，由于堆要时刻保持这样的规则特性，所以一旦堆里面的数据发生变化，我们必须对堆重新进行一次构建。<br>
既然堆顶元素永远都是整棵树中的最大值，那么我们将数据构建成堆后，只需要从堆顶取元素不就好了吗？ 第一次取的元素，是否取的就是最大值？取完后把堆重新构建一下，然后再取堆顶的元素，是否取的就是第二大的值？ 反复的取，取出来的数据也就是有序的数据。</p>
<figure data-type="image" tabindex="8"><img src="https://linuxcpporz.github.io/post-images/1634575824751.gif" alt="" loading="lazy"></figure>
<h2 id="c实现堆排序">C++实现堆排序</h2>
<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
// 堆排序：（最大堆，有序区）。从堆顶把根卸出来放在有序区之前，再恢复堆。
void max_heapify(int arr[], int start, int end) {

    int dad = start;
    int son = dad * 2 + 1;
    while (son &lt;= end) { 
        if (son + 1 &lt;= end &amp;&amp; arr[son] &lt; arr[son + 1])
            son++;
        if (arr[dad] &gt; arr[son]) 
            return;
        else { 
            swap(arr[dad], arr[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
}

void heap_sort(int arr[], int len) {
    for (int i = len / 2 - 1; i &gt;= 0; i--)
        max_heapify(arr, i, len - 1);
    for (int i = len - 1; i &gt; 0; i--) {
        swap(arr[0], arr[i]);
        max_heapify(arr, 0, i - 1);
    }
}

int main() {
    int arr[] = { 3, 5, 3, 0, 8, 6, 1, 5, 8, 6, 2, 4, 9, 4, 7, 0, 1, 8, 9, 7, 3, 1, 2, 5, 9, 7, 4, 0, 2, 6 };
    int len = (int) sizeof(arr) / sizeof(*arr);
    heap_sort(arr, len);
    for (int i = 0; i &lt; len; i++)
        cout &lt;&lt; arr[i] &lt;&lt; ' ';
    cout &lt;&lt; endl;
    return 0;
}
</code></pre>
<h1 id="8-计数排序">8 计数排序</h1>
<p>计数排序是一种非基于比较的排序算法，我们之前介绍的各种排序算法几乎都是基于元素之间的比较来进行排序的，计数排序的时间复杂度为 O(n + m )，m 指的是数据量，说的简单点，计数排序算法的时间复杂度约等于 O(n)，快于任何比较型的排序算法。</p>
<figure data-type="image" tabindex="9"><img src="https://linuxcpporz.github.io/post-images/1634575892087.gif" alt="" loading="lazy"></figure>
<p>计数排序：统计小于等于该元素值的元素的个数i，于是该元素就放在目标数组的索引i位（i≥0）。</p>
<p>计数排序基于一个假设，待排序数列的所有数均为整数，且出现在（0，k）的区间之内。<br>
如果 k（待排数组的最大值） 过大则会引起较大的空间复杂度，一般是用来排序 0 到 100 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。<br>
计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>
时间复杂度为 O（n+k），空间复杂度为 O（n+k）</p>
<p>算法的步骤如下：</p>
<ol>
<li>找出待排序的数组中最大和最小的元素</li>
<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项</li>
<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</li>
<li>反向填充目标数组：将每个元素 i 放在新数组的第 C[i] 项，每放一个元素就将 C[i] 减去 1</li>
</ol>
<h2 id="c实现计数排序">C++实现计数排序</h2>
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

// 计数排序
void CountSort(vector&lt;int&gt;&amp; vecRaw, vector&lt;int&gt;&amp; vecObj)
{
    // 确保待排序容器非空
    if (vecRaw.size() == 0)
        return;

    // 使用 vecRaw 的最大值 + 1 作为计数容器 countVec 的大小
    int vecCountLength = (*max_element(begin(vecRaw), end(vecRaw))) + 1;
    vector&lt;int&gt; vecCount(vecCountLength, 0);

    // 统计每个键值出现的次数
    for (int i = 0; i &lt; vecRaw.size(); i++)
        vecCount[vecRaw[i]]++;
    
    // 后面的键值出现的位置为前面所有键值出现的次数之和
    for (int i = 1; i &lt; vecCountLength; i++)
        vecCount[i] += vecCount[i - 1];

    // 将键值放到目标位置
    for (int i = vecRaw.size(); i &gt; 0; i--)	// 此处逆序是为了保持相同键值的稳定性
        vecObj[--vecCount[vecRaw[i - 1]]] = vecRaw[i - 1];
}

int main()
{
    vector&lt;int&gt; vecRaw = { 0,5,7,9,6,3,4,5,2,8,6,9,2,1 };
    vector&lt;int&gt; vecObj(vecRaw.size(), 0);

    CountSort(vecRaw, vecObj);

    for (int i = 0; i &lt; vecObj.size(); ++i)
        cout &lt;&lt; vecObj[i] &lt;&lt; &quot;  &quot;;
    cout &lt;&lt; endl;

    return 0;
}
</code></pre>
<h2 id="计数局限性">计数局限性</h2>
<p>计数排序的毛病很多，我们来找找 bug 。</p>
<p>如果我要排的数据里有 0 呢？ int[] 初始化内容全是 0 ，排毛线。</p>
<p>如果我要排的数据范围比较大呢？比如[ 1，9999 ]，我排两个数你要创建一个 int[10000] 的数组来计数？</p>
<p>对于第一个 bug ，我们可以使用偏移量来解决，比如我要排[ -1，0，-3 ]这组数字，这个简单，我全给你们加 10 来计数，变成[ 9，10，7 ]计完数后写回原数组时再减 10。不过有可能也会踩到坑，万一你数组里恰好有一个 -10，你加上 10 后又变 0 了，排毛线。</p>
<p>对于第二个 bug ，确实解决不了，如果是[ 9998，9999 ]这种虽然值大但是相差范围不大的数据我们也可以使用偏移量解决，比如这两个数据，我减掉 9997 后只需要申请一个 int[3] 的数组就可以进行计数。</p>
<p>由此可见，计数排序只适用于正整数并且取值范围相差不大的数组排序使用，它的排序的速度是非常可观的。</p>
<h1 id="9-桶排序">9 桶排序</h1>
<p>桶排序可以看成是计数排序的升级版，它将要排的数据分到多个有序的桶里，每个桶里的数据再单独排序，再把每个桶的数据依次取出，即可完成排序。</p>
<figure data-type="image" tabindex="10"><img src="https://linuxcpporz.github.io/post-images/1634576033208.gif" alt="" loading="lazy"></figure>
<p>将值为i的元素放入i号桶，最后依次把桶里的元素倒出来。</p>
<p>桶排序序思路：</p>
<ol>
<li>设置一个定量的数组当作空桶子。</li>
<li>寻访序列，并且把项目一个一个放到对应的桶子去。</li>
<li>对每个不是空的桶子进行排序。</li>
<li>从不是空的桶子里把项目再放回原来的序列中。</li>
</ol>
<p>假设数据分布在[0，100)之间，每个桶内部用链表表示，在数据入桶的同时插入排序，然后把各个桶中的数据合并。</p>
<h2 id="c实现桶排序">C++实现桶排序</h2>
<pre><code>#include&lt;iterator&gt;
#include&lt;iostream&gt;
#include&lt;vector&gt;
using std::vector;

const int BUCKET_NUM = 10;

struct ListNode{
    explicit ListNode(int i=0):mData(i),mNext(NULL){}
    ListNode* mNext;
    int mData;
};

ListNode* insert(ListNode* head,int val){
    ListNode dummyNode;
    ListNode *newNode = new ListNode(val);
    ListNode *pre,*curr;
    dummyNode.mNext = head;
    pre = &amp;dummyNode;
    curr = head;
    while(NULL!=curr &amp;&amp; curr-&gt;mData&lt;=val){
        pre = curr;
        curr = curr-&gt;mNext;
    }
    newNode-&gt;mNext = curr;
    pre-&gt;mNext = newNode;
    return dummyNode.mNext;
}


ListNode* Merge(ListNode *head1,ListNode *head2){
    ListNode dummyNode;
    ListNode *dummy = &amp;dummyNode;
    while(NULL!=head1 &amp;&amp; NULL!=head2){
        if(head1-&gt;mData &lt;= head2-&gt;mData){
            dummy-&gt;mNext = head1;
            head1 = head1-&gt;mNext;
        }else{
            dummy-&gt;mNext = head2;
            head2 = head2-&gt;mNext;
        }
        dummy = dummy-&gt;mNext;
    }
    if(NULL!=head1) dummy-&gt;mNext = head1;
    if(NULL!=head2) dummy-&gt;mNext = head2;
    
    return dummyNode.mNext;
}

void BucketSort(int n,int arr[]){
    vector&lt;ListNode*&gt; buckets(BUCKET_NUM,(ListNode*)(0));
    for(int i=0;i&lt;n;++i){
        int index = arr[i]/BUCKET_NUM;
        ListNode *head = buckets.at(index);
        buckets.at(index) = insert(head,arr[i]);
    }
    ListNode *head = buckets.at(0);
    for(int i=1;i&lt;BUCKET_NUM;++i){
        head = Merge(head,buckets.at(i));
    }
    for(int i=0;i&lt;n;++i){
        arr[i] = head-&gt;mData;
        head = head-&gt;mNext;
    }
}
</code></pre>
<h1 id="10-基数排序">10 基数排序</h1>
<p>基数排序是一种非比较型整数排序算法，其原理是将数据按位数切割成不同的数字，然后按每个位数分别比较。<br>
假设说，我们要对 100 万个手机号码进行排序，应该选择什么排序算法呢？排的快的有归并、快排时间复杂度是 O(nlogn)，计数排序和桶排序虽然更快一些，但是手机号码位数是11位，那得需要多少桶？内存条表示不服。<br>
这个时候，我们使用基数排序是最好的选择。</p>
<figure data-type="image" tabindex="11"><img src="https://linuxcpporz.github.io/post-images/1634576134494.gif" alt="" loading="lazy"></figure>
<p>基数排序：一种多关键字的排序算法，可用桶排序实现。</p>
<h2 id="c实现基数排序">C++实现基数排序</h2>
<pre><code>int maxbit(int data[], int n) //辅助函数，求数据的最大位数
{
    int maxData = data[0];		///&lt; 最大数
    /// 先求出最大数，再求其位数，这样有原先依次每个数判断其位数，稍微优化点。
    for (int i = 1; i &lt; n; ++i)
    {
        if (maxData &lt; data[i])
            maxData = data[i];
    }
    int d = 1;
    int p = 10;
    while (maxData &gt;= p)
    {
        //p *= 10; // Maybe overflow
        maxData /= 10;
        ++d;
    }
    return d;
/*    int d = 1; //保存最大的位数
    int p = 10;
    for(int i = 0; i &lt; n; ++i)
    {
        while(data[i] &gt;= p)
        {
            p *= 10;
            ++d;
        }
    }
    return d;*/
}
void radixsort(int data[], int n) //基数排序
{
    int d = maxbit(data, n);
    int *tmp = new int[n];
    int *count = new int[10]; //计数器
    int i, j, k;
    int radix = 1;
    for(i = 1; i &lt;= d; i++) //进行d次排序
    {
        for(j = 0; j &lt; 10; j++)
            count[j] = 0; //每次分配前清空计数器
        for(j = 0; j &lt; n; j++)
        {
            k = (data[j] / radix) % 10; //统计每个桶中的记录数
            count[k]++;
        }
        for(j = 1; j &lt; 10; j++)
            count[j] = count[j - 1] + count[j]; //将tmp中的位置依次分配给每个桶
        for(j = n - 1; j &gt;= 0; j--) //将所有桶中记录依次收集到tmp中
        {
            k = (data[j] / radix) % 10;
            tmp[count[k] - 1] = data[j];
            count[k]--;
        }
        for(j = 0; j &lt; n; j++) //将临时数组的内容复制到data中
            data[j] = tmp[j];
        radix = radix * 10;
    }
    delete []tmp;
    delete []count;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[十四种常见的算法]]></title>
        <id>https://linuxcpporz.github.io/post/shi-si-chong-chang-jian-de-suan-fa/</id>
        <link href="https://linuxcpporz.github.io/post/shi-si-chong-chang-jian-de-suan-fa/">
        </link>
        <updated>2021-10-17T09:05:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="滑动窗口">滑动窗口</h1>
<p>滑动窗口类型的题目经常是用来执行数组或是链表上某个区间（窗口）上的操作。比如找最长的全为1的子数组长度。滑动窗口一般从第一个元素开始，一直往右边一个一个元素挪动。当然了，根据题目要求，我们可能有固定窗口大小的情况，也有窗口的大小变化的情况。</p>
<p>下面是一些我们用来判断我们可能需要上滑动窗口策略的方法：</p>
<ul>
<li>这个问题的输入是一些线性结构：比如链表呀，数组啊，字符串啊之类的</li>
<li>让你去求最长/最短子字符串或是某些特定的长度要求</li>
</ul>
<p>常见的问题有：</p>
<ul>
<li>窗口大小为K的最大子数组和（简单）</li>
<li>拥有K个不同的字母的最长子串（中等）</li>
<li>字符串的同字母异序词（困难）</li>
</ul>
<p>#双指针模式</p>
<p>双指针是这样的模式：两个指针朝着左右方向移动（双指针分为同向双指针和异向双指针），直到他们有一个或是两个都满足某种条件。双指针通常用在排好序的数组或是链表中寻找对子。比如，你需要去比较数组中每个元素和其他元素的关系时，你就需要用到双指针了。</p>
<p>我们需要双指针的原因是：如果你只用一个指针的话，你得来回跑才能在数组中找到你需要的答案。这一个指针来来回回的过程就很耗时和浪费空间了 — 这是考虑算法的复杂度分析的时候的重要概念。虽然brute force一个指针的解法可能会奏效，但时间复杂度一般会是O(n²)。在很多情况下，双指针能帮助我们找到空间或是时间复杂度更低的解。</p>
<p>识别使用双指针的招数：</p>
<ul>
<li>一般来说，数组或是链表是排好序的，你得在里头找一些组合满足某种限制条件</li>
<li>这种组合可能是一对数，三个数，或是一个子数组</li>
</ul>
<p>可以放双指针大招的题目：</p>
<ul>
<li>输出一个排好序的数组的平方数组（简单）</li>
<li>3-Sum（中等）</li>
<li>比较两个字符是否相等，字符中包括得有退格键（中等）</li>
</ul>
<h1 id="快慢指针">快慢指针</h1>
<p>这种模式，有一个非常出门的名字，叫龟兔赛跑。解释一下快慢指针：这种算法的两个指针的在数组上（或是链表上，序列上）的移动速度不一样。还别说，这种方法在解决有环的链表和数组时特别有用。</p>
<p>通过控制指针不同的移动速度（比如在环形链表上），这种算法证明了他们肯定会相遇的。快的一个指针肯定会追上慢的一个（可以想象成跑道上面跑得快的人套圈跑得慢的人）。</p>
<p>需要用快慢指针模式的时候：</p>
<ul>
<li>问题需要处理环上的问题，比如环形链表和环形数组</li>
<li>当你需要知道链表的长度或是某个特别位置的信息的时候</li>
</ul>
<p>什么时候用快慢指针而不是上面的双指针呢？<br>
有些情形下，咱们不应该用双指针，比如我们在单链表上不能往回移动的时候。一个典型的需要用到快慢指针的模式的是当你需要去判断一个链表是否是回文的时候。</p>
<p>快慢指针可秒的题目：</p>
<ul>
<li>链表是否有环（简单）</li>
<li>链表是否满足回文（中等）</li>
<li>环状数组中检测环（困难）</li>
</ul>
<h1 id="区间合并">区间合并</h1>
<p>区间合并模式是一个用来处理有区间重叠的很高效的技术。在设计到区间的很多问题中，通常咱们需要要么判断是否有重叠，要么合并区间，如果他们重叠的话。</p>
<p>怎么识别什么时候用合并区间模式？</p>
<ul>
<li>当你需要产生一堆相互之间没有交集的区间的时候</li>
<li>当你听到重叠区间的时候</li>
</ul>
<p>合并区间的题目：</p>
<ul>
<li>区间交集（中等）</li>
<li>最大化CPU负载（困难）</li>
</ul>
<h1 id="循环排序">循环排序</h1>
<p>这种模式讲述的是一直很好玩的方法：可以用来处理数组中的数值限定在一定的区间的问题。这种模式一个个遍历数组中的元素，如果当前这个数它不在其应该在的位置的话，咱们就把它和它应该在的那个位置上的数交换一下。你可以尝试将该数放到其正确的位置上，但这复杂度就会是O(n^2)。这样的话，可能就不是最优解了。因此循环排序的优势就体现出来了。</p>
<p>如何鉴别这种模式：</p>
<ul>
<li>这些问题一般设计到排序好的数组，而且数值一般满足于一定的区间</li>
<li>如果问题让你需要在排好序/翻转过的数组中，寻找丢失的/重复的/最小的元素</li>
</ul>
<p>能用循环排序解的题：</p>
<ul>
<li>需要数组中没出现的数字 （简单）</li>
<li>寻找最小的没出现的正整数 （中等）</li>
</ul>
<h1 id="原地链表翻转">原地链表翻转</h1>
<p>在众多问题中，题目可能需要你去翻转链表中某一段的节点。通常，要求都是你得原地翻转，就是重复使用这些已经建好的节点，而不使用额外的空间。这个时候，原地翻转模式就要发挥威力了。</p>
<p>这种模式每次就翻转一个节点。一般需要用到多个变量，一个变量指向头结点，另外一个（previous）则指向咱们刚刚处理完的那个节点。在这种固定步长的方式下，你需要先将当前节点（current）指向前一个节点（previous），再移动到下一个。同时，你需要将previous总是更新到你刚刚新鲜处理完的节点，以保证正确性。</p>
<p>如何鉴别这种模式：</p>
<ul>
<li>如果你被问到需要去翻转链表，要求不能使用额外空间的时候</li>
</ul>
<p>这种模式的适用场景：</p>
<ul>
<li>翻转链表中的一段（中等）</li>
<li>翻转每k个元素为一组的子链表段（中等）</li>
</ul>
<h1 id="树上的bfs">树上的BFS</h1>
<p>这种模式基于宽搜（Breadth First Search (BFS)），适用于需要遍历一颗树。借助于队列数据结构，从而能保证树的节点按照他们的层数打印出来。打印完当前层所有元素，才能执行到下一层。所有这种需要遍历树且需要一层一层遍历的问题，都能用这种模式高效解决。</p>
<p>这种树上的BFS模式是通过把根节点加到队列中，然后不断遍历直到队列为空。每一次循环中，我们都会把队头结点拿出来（remove），然后对其进行必要的操作。在删除每个节点的同时，其孩子节点，都会被加到队列中。</p>
<p>识别树上的BFS模式：</p>
<ul>
<li>如果你被问到去遍历树，需要按层操作的方式（也称作层序遍历）</li>
</ul>
<p>该模式可解的题：</p>
<ul>
<li>二叉树层序遍历（简单）</li>
<li>之字形遍历（中等）</li>
</ul>
<h1 id="树上的dfs">树上的DFS</h1>
<p>树形DFS基于深搜（Depth First Search (DFS)）技术来实现树的遍历。</p>
<p>咱们可以用递归（或是显示栈，如果你想用迭代方式的话）来记录遍历过程中访问过的父节点。</p>
<p>该模式的运行方式是从根节点开始，如果该节点不是叶子节点，我们需要干三件事：</p>
<ol>
<li>需要区别我们是先处理根节点（pre-order，前序），处理孩子节点之间处理根节点（in-order，中序），还是处理完所有孩子再处理根节点（post-order，后序）。</li>
<li>递归处理当前节点的左右孩子。</li>
</ol>
<p>识别树形DFS：</p>
<ul>
<li>你需要按前中后序的DFS方式遍历树</li>
<li>如果该问题的解一般离叶子节点比较近。</li>
</ul>
<p>树形DFS可破的题目：</p>
<ul>
<li>树上所有路径上表示的数字的和（中等）</li>
<li>树中所有能形成目标和的路径（中等）</li>
</ul>
<h1 id="双堆模式">双堆模式</h1>
<p>很多问题中，我们被告知，我们拿到一大把可以分成两队的数字。为了解决这个问题，我们感兴趣的是，怎么把数字分成两半？使得：小的数字都放在一起，大的放在另外一半。双堆模式就能高效解决此类问题。</p>
<p>正如名字所示，该模式用到了两个堆，是不是很难猜？一个最小堆用来找最小元素；一个最大堆，拿到最大元素。这种模式将一半的元素放在最大堆中，这样你可以从这一堆中秒找到最大元素。同理，把剩下一半丢到最小堆中，O(1)时间找到他们中的最小元素。通过这样的方式，这一大堆元素的中位数就可以从两个堆的堆顶拿到数字，从而计算出来。</p>
<p>判断双堆模式的秘诀：</p>
<ul>
<li>这种模式在优先队列，计划安排问题（Scheduling）中有奇效</li>
<li>如果问题让你找一组数中的最大/最小/中位数</li>
<li>有时候，这种模式在涉及到二叉树数据结构时也特别有用</li>
</ul>
<p>典型问题：</p>
<ul>
<li>找数字流中的中位数（中等）</li>
</ul>
<h1 id="子集问题模式">子集问题模式</h1>
<p>超级多的编程面试问题都会涉及到排列和组合问题。子集问题模式讲的是用BFS来处理这些问题。</p>
<p>这个模式是这样的：</p>
<p>给一组数字 [1, 5, 3]</p>
<ol>
<li>我们从空集开始：[[]]</li>
<li>把第一个数（1），加到之前已经存在的集合中：[[], [1]];</li>
<li>把第二个数（5），加到之前的集合中得到：[[], [1], [5], [1,5]];</li>
<li>再加第三个数（3），则有：[[], [1], [5], [1,5], [3], [1,3], [5,3], [1,5,3]].</li>
</ol>
<p>如何判断这种子集模式：</p>
<ul>
<li>问题需要咱们去找数字的组合或是排列</li>
</ul>
<p>子集模式适用的场景：</p>
<ul>
<li>有重复元素的所有子集（简单）</li>
<li>通过改变大小写，找到所有可能的字符串排列（中等）</li>
</ul>
<h1 id="二分变种">二分变种</h1>
<p>当你需要解决的问题的输入是排好序的数组，链表，或是排好序的矩阵，要求咱们寻找某些特定元素。这个时候的不二选择就是二分搜索。这种模式是一种超级牛的用二分来解决问题的方式。</p>
<p>对于一组满足上升排列的数集来说，这种模式的步骤是这样的：</p>
<ol>
<li>首先，算出左右端点的中点。最简单的方式是这样的：middle = (start + end) / 2。但这种计算方式有不小的概率会出现整数越界。因此一般都推荐另外这种写法：middle = start + (end — start) / 2</li>
<li>如果要找的目标改好和中点所在的数值相等，我们返回中点的下标就行</li>
<li>如果目标不等的话：我们就有两种移动方式了</li>
<li>如果目标比中点在的值小（key &lt; arr[middle]）：将下一步搜索空间放到左边（end = middle - 1）</li>
<li>如果比中点的值大，则继续在右边搜索，丢弃左边：left = middle + 1</li>
<li></li>
</ol>
<p>变种二分可以解决的问题：</p>
<ul>
<li>顺序未知的二分（可能翻转过了，简单）</li>
<li>无界排序数组的二分（中等）</li>
</ul>
<h1 id="前k大的数模式">前K大的数模式</h1>
<p>任何让我们求解最大/最小/最频繁的K个元素的题，都遵循这种模式。</p>
<p>用来记录这种前K类型的最佳数据结构就是堆了（译者注：在Java中，改了个名，叫优先队列（PriorityQueue））。这种模式借助堆来解决很多这种前K个数值的问题。</p>
<p>这个模式是这样的：</p>
<ol>
<li>根据题目要求，将K个元素插入到最小堆或是最大堆。</li>
<li>遍历剩下的还没访问的元素，如果当前出来到的这个元素比堆顶元素大，那咱们把堆顶元素先删除，再加当前元素进去。</li>
</ol>
<p>注意这种模式下，咱们不需要去排序数组，因为堆具有这种良好的局部有序性，这对咱们需要解决问题就够了。</p>
<p>识别最大K个元素模式：</p>
<ul>
<li>如果你需要求最大/最小/最频繁的前K个元素</li>
<li>如果你需要通过排序去找一个特定的数</li>
</ul>
<p>前K个元素模式的场景：</p>
<ul>
<li>前K大的数（简单）</li>
<li>前K个最常出现的数字（中等）</li>
</ul>
<h1 id="k路归并">K路归并</h1>
<p>K路归并能帮咱们解决那些涉及到多组排好序的数组的问题。</p>
<p>每当你的输入是K个排好序的数组，你就可以用堆来高效顺序遍历其中所有数组的所有元素。你可以将每个数组中最小的一个元素加入到最小堆中，从而得到全局最小值。当我们拿到这个全局最小值之后，再从该元素所在的数组里取出其后面紧挨着的元素，加入堆。如此往复直到处理完所有的元素。</p>
<p>该模式是这样的运行的：</p>
<ol>
<li>把每个数组中的第一个元素都加入最小堆中</li>
<li>取出堆顶元素（全局最小），将该元素放入排好序的结果集合里面</li>
<li>将刚取出的元素所在的数组里面的下一个元素加入堆</li>
<li>重复步骤2，3，直到处理完所有数字</li>
</ol>
<p>识别K路归并：</p>
<ul>
<li>该问题的输入是排好序的数组，链表或是矩阵</li>
<li>如果问题让咱们合并多个排好序的集合，或是需要找这些集合中最小的元素</li>
</ul>
<p>K路归并的题目：</p>
<ul>
<li>合并K个排好序的链表（中等）</li>
<li>K对数和最大（困难）</li>
</ul>
<h1 id="拓扑排序模式">拓扑排序模式</h1>
<p>拓扑排序模式用来寻找一种线性的顺序，这些元素之间具有依懒性。比如，如果事件B依赖于事件A，那A在拓扑排序顺序中排在B的前面。</p>
<p>这种模式定义了一种简单方式来理解拓扑排序这种技术。</p>
<p>这种模式是这样奏效的：</p>
<ol>
<li>初始化</li>
</ol>
<ul>
<li>借助于HashMap将图保存成邻接表形式。</li>
<li>找到所有的起点，用HashMap来帮助记录每个节点的入度</li>
</ul>
<ol start="2">
<li>创建图，找到每个节点的入度</li>
</ol>
<ul>
<li>利用输入，把图建好，然后遍历一下图，将入度信息记录在HashMap中</li>
</ul>
<ol start="3">
<li>找所有的起点</li>
</ol>
<ul>
<li>所有入度为0的节点，都是有效的起点，而且我们讲他们都加入到一个队列中</li>
</ul>
<ol start="4">
<li>排序</li>
</ol>
<ul>
<li>对每个起点，执行以下步骤<br>
把它加到结果的顺序中<br>
将其在图中的孩子节点取到<br>
将其孩子的入度减少1<br>
如果孩子的入度变为0，则改孩子节点成为起点，将其加入队列中b) 重复 （b）过程，直到起点队列为空。</li>
</ul>
<p>拓扑排序模式识别：</p>
<ul>
<li>待解决的问题需要处理无环图</li>
<li>你需要以一种有序的秩序更新输入元素</li>
<li>需要处理的输入遵循某种特定的顺序</li>
</ul>
<p>拓扑排序的试炼场：</p>
<ul>
<li>任务执行顺序安排（中等）</li>
<li>树的最小高度（困难）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端深入Vue框架]]></title>
        <id>https://linuxcpporz.github.io/post/qian-duan-shen-ru-vue-kuang-jia/</id>
        <link href="https://linuxcpporz.github.io/post/qian-duan-shen-ru-vue-kuang-jia/">
        </link>
        <updated>2021-10-16T19:36:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="概述">概述</h1>
<p>基于JavaScript的渐进式前段框架<br>
基于JavaScript:本质就是封装了js代码,提供vue.js文件<br>
渐进式:vue框架的功能很丰富,可以自己选择用哪些功能<br>
前端框架:只是提供了一套API,指定软件的流程<br>
特点:轻量级 + MVVM思想 + 数据驱动/双向绑定 + 组件化</p>
<p>#步骤</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;测试 vue入门案例&lt;/title&gt;
        &lt;!-- 步骤: 1.引入vue.js文件 
            src指定js文件的位置,原则:先找到和自己网页同级的资源
        --&gt;
        &lt;script src=&quot;vue/vue.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- 2.准备数据渲染区:是指在指定位置展示vue提供的数据 --&gt;
        &lt;div id=&quot;app&quot;&gt;{{msg}}{{hh}}&lt;/div&gt;
        
        &lt;!-- 3.使用vue准备数据,让第二步获取数据 --&gt;
        &lt;script&gt;
            var a = {
                msg:&quot;99级封号斗罗&quot;,
                hh:&quot;sdf&quot;
            }
            new Vue({
                //el属性是挂载点,即将把数据展示在指定位置(css选择器)
                el:&quot;#app&quot;,//指定数据渲染区,id选择器,用#获取id的值
                //data属性是用来准备数据
                data:a
            })
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h1 id="mvvm">MVVM</h1>
<p>M:Model 模型,数据 javascript对象 是指存数据的地方<br>
V:View 视图 DOM 是指展示数据的地方<br>
VM:ViewModel 通讯 观察者 练习了M和V的关系(new Vue)<br>
好处是可以松耦合</p>
<figure data-type="image" tabindex="1"><img src="https://linuxcpporz.github.io/post-images/1634413068538.png" alt="" loading="lazy"></figure>
<h1 id="vue使用">Vue使用</h1>
<p>vue使用步骤:导入vue.js文件,定位好view位置和model数据,通过new一个Vue对象来实现数据和视图的联系</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;测试 vue入门案例&lt;/title&gt;
        &lt;!-- 步骤: 1.引入vue.js文件 
            src指定js文件的位置,原则:先找到和自己网页同级的资源
        --&gt;
        &lt;script src=&quot;vue/vue.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- 2.准备数据渲染区:是指在指定位置展示vue提供的数据 --&gt;
        &lt;div id=&quot;app&quot;&gt;{{msg}}{{hh}}&lt;/div&gt;
        
        &lt;!-- 3.使用vue准备数据,让第二步获取数据 --&gt;
        &lt;script&gt;
            var a = {
                msg:&quot;99级封号斗罗&quot;,
                hh:&quot;sdf&quot;
            }
            new Vue({
                //el属性是挂载点,即将把数据展示在指定位置(css选择器)
                el:&quot;#app&quot;,//指定数据渲染区,id选择器,用#获取id的值
                //data属性是用来准备数据
                data:a
            })
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h1 id="浅析vue对象">浅析Vue对象</h1>
<p>el是挂载点,是等待被数据渲染的位置,data是这个位置可以使用的数据,另外还有methods这个位置可以使用的函数<br>
data数据的三种方式:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;测试 data里数据的三种写法&lt;/title&gt;
        &lt;script src=&quot;./vue/vue.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=&quot;app&quot;&gt;{{msg}}&lt;/div&gt;
        &lt;script&gt;
            new Vue({
                el:&quot;#app&quot;,
                /* data数据的三种写法 */
                //第一种:标准写法
                // data:{
                // 	msg:&quot;你好我是第一种写法标准写法&quot;
                // }
                //第二种:定义函数,返回对象
                // data:function(){//方便的把组件间的关系实现松耦合
                // 	return {
                // 		msg:&quot;你好我是第二种写法定义函数,返回对象&quot;
                // 	}
                // }
                //第三种:第二种的简写
                data(){
                    return{
                        msg:&quot;你好我是第三种写法简写的函数&quot;
                    }
                }
            })
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h1 id="vue指令">Vue指令</h1>
<p>判断v-if<br>
循环v-for<br>
事件:v-on<br>
绑定:v-bind<br>
双向绑定:v-model<br>
闪现:v-cloak</p>
]]></content>
    </entry>
</feed>